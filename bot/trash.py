

""" 
class GameState(StatesGroup):
    playing = State()
    creators_editing = State()
    creating_content = State()


def generate_keyboard(question: Question) -> ReplyKeyboardMarkup:

    buttons_count = question.answers_count + 1
    numbers = random.sample(range(1, 101), buttons_count)
    buttons = [[KeyboardButton(text=str(num))] for num in numbers]

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )


async def next_round(message: Message):
    number = random.randint(1, 10)
    keyboard = generate_keyboard()
    await message.answer(
        f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{number}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —á–∏—Å–µ–ª –Ω–∏–∂–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /start_game —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")


@dp.message(Command("start_game"))
async def cmd_start_game(message: Message, state: FSMContext):
    await state.set_state(GameState.playing)
    await next_round(message)


@dp.message(GameState.playing, F.text)
async def handle_game_message(message: Message, state: FSMContext):
    await message.answer(f"–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —á–∏—Å–ª–æ–º {message.text}")
    await next_round(message)


@dp.message(Command("end_game"))
async def cmd_end_game(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove()) """

""" @inject
async def send_question(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession = Provide[C.db_session],
    minio_client: Minio = Provide[C.minio_client]
):

    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
    qr = QuestionRepository(session)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ
    questions = await qr.get_random_questions(5)
    question = questions[0]

    # –ë–µ—Ä–µ–º 4 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
    wrong_opts = questions[1:]

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + 4 –Ω–µ–≤–µ—Ä–Ω—ã—Ö)
    random.shuffle(questions)

    # –§–æ—Ä–º–∏—Ä—É–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    for opt in questions:
        btn = InlineKeyboardButton(
            text=opt.file.answer,
            callback_data=f"answer:{opt.id}"
        )
        keyboard.insert(btn)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL –¥–ª—è –º–µ–¥–∏–∞-–≤–æ–ø—Ä–æ—Å–∞
    media_url = minio_client.presigned_get_object(
        bucket_name=settings.minio_bucket,
        object_name=str(question.file.id),
        expires=timedelta(minutes=5)  # —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ 5 –º–∏–Ω—É—Ç
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer_photo(
        photo=media_url,
        caption="ABOBA?",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö
    await state.update_data(question_id=question.id)


    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer()

    data = await state.get_data()
    current_qid: int = data.get("question_id")
    selected_id = int(callback.data.split("\":\", 1)[1])

    qr = QuestionRepository(session)
    question = await qr.get_by_id(current_qid)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
    if selected_id == question.id:
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.answer_text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await callback.message.answer(result_text)
    await send_question(callback.message, state) """


