services:
  postgres:
    container_name: postgres-bot
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis-bot
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio-bot
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - app-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:latest
    container_name: createbuckets-bot
    depends_on:
      minio:
        condition: service_healthy

    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD};
      /usr/bin/mc mb myminio/${MINIO_BUCKET};
      /usr/bin/mc admin user svcacct add \
      --access-key ${MINIO_ACCESS_KEY} \
      --secret-key ${MINIO_SECRET_KEY} \
      myminio ${MINIO_USER};
      exit 0;
      "
    networks:
      - app-network

  alembic:
    build:
      context: ./
    container_name: alembic-bot
    command: alembic upgrade head
    restart: "no"
    env_file:
      - .env
    environment:
      DATABASE_URL: >
        postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_IP}:${DB_PORT}/${DB_NAME}
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  app-network:
    driver: bridge
